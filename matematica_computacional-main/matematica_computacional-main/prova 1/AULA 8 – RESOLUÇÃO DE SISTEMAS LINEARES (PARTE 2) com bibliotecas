import numpy as np

def fatoracao_lu(A):
    """
    Realiza a fatoração LU da matriz A usando o método de eliminação de Gauss.

    Parâmetros:
        A (ndarray): Matriz quadrada a ser fatorada.

    Retorno:
        L (ndarray): Matriz triangular inferior.
        U (ndarray): Matriz triangular superior.
    """
    n = A.shape[0]
    L = np.eye(n)
    U = A.copy()

    for k in range(n - 1):
        for i in range(k + 1, n):
            m = U[i, k] / U[k, k]
            L[i, k] = m
            U[i, k:] = U[i, k:] - m * U[k, k:]

    return L, U

def fatoracao_lu_pivoteamento(A):
    """
    Realiza a fatoração LU com pivoteamento parcial da matriz A.

    Parâmetros:
        A (ndarray): Matriz quadrada a ser fatorada.

    Retorno:
        P (ndarray): Matriz de permutação.
        L (ndarray): Matriz triangular inferior.
        U (ndarray): Matriz triangular superior.
    """
    n = A.shape[0]
    P = np.eye(n)
    L = np.zeros((n, n))
    U = A.copy()

    for k in range(n - 1):
        # Pivoteamento parcial
        max_index = np.argmax(abs(U[k:, k])) + k
        if max_index != k:
            U[[k, max_index], :] = U[[max_index, k], :]
            P[[k, max_index], :] = P[[max_index, k], :]
            L[[k, max_index], :] = L[[max_index, k], :]

        for i in range(k + 1, n):
            m = U[i, k] / U[k, k]
            L[i, k] = m
            U[i, k:] = U[i, k:] - m * U[k, k:]

    np.fill_diagonal(L, 1)
    return P, L, U

# Exemplo de uso
if __name__ == "__main__":
    A = np.array([[4, 3, 2],
                  [2, 1, 1],
                  [6, 5, 4]], dtype=float)

    print("Fatoração LU sem pivoteamento:")
    L, U = fatoracao_lu(A)
    print("L:")
    print(L)
    print("U:")
    print(U)

    print("\nFatoração LU com pivoteamento parcial:")
    P, L, U = fatoracao_lu_pivoteamento(A)
    print("P:")
    print(P)
    print("L:")
    print(L)
    print("U:")
    print(U)
